# Slip 17 â€” eigenpairs; Gaussian elimination from augmented; LP with optimize (Max)
import numpy as np
from scipy.optimize import linprog

# Q1
D = np.array([[2,4,1],[-1,1,-2],[4,0,6]], float)
w,v = np.linalg.eig(D)
print("Q1) eigenvalues =", w)
print("Q1) eigenvectors =\n", v)

# Q2 Gaussian elimination with printed steps
M = np.array([[3,-2,1,13],[-2,1,4,11],[1,4,-5,-31]], float)
print("\nQ2) Start:\n", M)
# Eliminate
M[2] -= (M[2,0]/M[0,0])*M[0]; print("After R3 <- R3 - (a31/a11)R1:\n", M)
M[1] -= (M[1,0]/M[0,0])*M[0]; print("After R2 <- R2 - (a21/a11)R1:\n", M)
M[2] -= (M[2,1]/M[1,1])*M[1]; print("After R3 <- R3 - (a32/a22)R2:\n", M)
# Back-sub
U,b = M[:,:-1], M[:,-1]
z = b[2]/U[2,2]; y = (b[1]-U[1,2]*z)/U[1,1]; x = (b[0]-U[0,1]*y-U[0,2]*z)/U[0,0]
print("Q2) (x,y,z) =", (x,y,z))

# Q3 Max 10x+15y; 2x+y<=8; x+3y<=9
c = -np.array([10,15])
A_ub = np.array([[2,1],[1,3]], float)
b_ub = np.array([8,9], float)
res = linprog(c, A_ub=A_ub, b_ub=b_ub, bounds=[(0,None)]*2, method="highs")
print("Q3) Z* =", -res.fun, " at (x,y) =", res.x)
