# Slip 18 — inv, det, rank; Cramer's; LP with optimize (Min)
import numpy as np
from scipy.optimize import linprog

# Q1
A = np.array([[2,1,1],[1,3,2],[1,0,0]], float)
print("Q1) inv(A)=\n", np.linalg.inv(A))
print("Q1) det(A)=", np.linalg.det(A))
print("Q1) rank(A)=", np.linalg.matrix_rank(A))

# Q2 Cramer's (2x2)
A2 = np.array([[2,5],[-4,3]], float)
b2 = np.array([2,-30], float)
detA = np.linalg.det(A2)
x = np.linalg.det(np.c_[b2, A2[:,1]])/detA
y = np.linalg.det(np.c_[A2[:,0], b2])/detA
print("Q2) (x,y) =", (x,y))

# Q3 Min 2x+3y+4z with mix ≥/≤:
c = np.array([2,3,4], float)
A_ub = np.array([[-1,-2,-1],[3,1,2]], float)  # first ≥ -> -; second ≤ stays +
b_ub = np.array([-8,12], float)
res = linprog(c, A_ub=A_ub, b_ub=b_ub, bounds=[(0,None)]*3, method="highs")
print("Q3) Z* =", res.fun, " at (x,y,z) =", res.x)
