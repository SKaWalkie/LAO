# Slip 4 â€” eigen, eigenvectors, inverse; Gauss-Seidel; LP with optimize
import numpy as np
from scipy.sparse import diags

# Q1
B = np.array([[1,2,0],[-7,5,6],[0,3,1]], float)
w,v = np.linalg.eig(B)
print("Q1) eigenvalues =", w)
print("Q1) eigenvectors (cols) =\n", v)
print("Q1) inv(B) =\n", np.linalg.inv(B))

# Q2 Gauss-Seidel for:
# 4x + y - z = 9
# 8y + 6z = -6
# -2x + 4y - 6z = 10
# Rewriting into standard Ax=b:
A = np.array([[4,1,-1],[0,8,6],[-2,4,-6]], float)
b = np.array([9,-6,10], float)
x = np.zeros(3)
for it in range(50):
    x_old = x.copy()
    x[0] = (b[0] - A[0,1]*x[1] - A[0,2]*x[2]) / A[0,0]
    x[1] = (b[1] - A[1,0]*x[0] - A[1,2]*x[2]) / A[1,1]
    x[2] = (b[2] - A[2,0]*x[0] - A[2,1]*x[1]) / A[2,2]
    if np.linalg.norm(x-x_old,ord=np.inf) < 1e-8: break
print("Q2) Gauss-Seidel solution:", x)

# Q3 Max 5x+3y s.t. x+y<=7; 2x+5y<=1; x,y>=0
from scipy.optimize import linprog
c = -np.array([5,3], float)
A_ub = np.array([[1,1],[2,5]], float)
b_ub = np.array([7,1], float)
res = linprog(c, A_ub=A_ub, b_ub=b_ub, bounds=[(0,None)]*2, method="highs")
print("Q3) Z* =", -res.fun, " at (x,y) =", res.x)
