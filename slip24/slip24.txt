# Slip 24 — orthogonal check; Gauss-Jordan; LP with optimize (Max)
import numpy as np
from scipy.optimize import linprog

# Q1 (create any 3x3 and test)
M = np.array([[1,0,0],[0,0,1],[0,1,0]], float)
print("Q1) M^T M =\n", M.T@M)
print("Q1) Orthogonal? ->", np.allclose(M.T@M, np.eye(3)))

# Q2 Gauss-Jordan for 3x3 system
M2 = np.array([[4,1,2,4],[1,5,1,7],[2,1,6,9]], float)
for i in range(3):
    M2[i] = M2[i]/M2[i,i]
    for j in range(3):
        if i!=j: M2[j] -= M2[j,i]*M2[i]
print("Q2) (x,y,z) =", tuple(M2[:,3]))

# Q3 Max 150x+75y with ≤
c = -np.array([150,75])
A_ub = np.array([[4,6],[5,3]], float)
b_ub = np.array([24,15], float)
res = linprog(c, A_ub=A_ub, b_ub=b_ub, bounds=[(0,None)]*2, method="highs")
print("Q3) Z* =", -res.fun, " at (x,y) =", res.x)
