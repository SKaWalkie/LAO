# Slip 6 â€” form A,X,B; solve with numpy.linalg; verify; Cramer; LP with PuLP
import numpy as np
from pulp import *

# Q1 (form + solve + verify)
A = np.array([[1,1,1],[2,3,7],[3,4,10]], float)
X = np.array([[0],[0],[0]], float)  # placeholder variable vector
B = np.array([[6],[20],[29]], float)
print("Q1) Coefficient A=\n", A, "\nVariable X=[x,y,z]^T\n", "Constant B=\n", B)
sol = np.linalg.solve(A, B)
print("Solution X =\n", sol)
print("Verify A@X =\n", A@sol)

# Q2 Cramer's
A2 = np.array([[1,1,-1],[0,8,6],[-2,4,-6]], float)
b2 = np.array([9,-6,40], float)
detA = np.linalg.det(A2)
ans=[]
for k in range(3):
    Ak=A2.copy(); Ak[:,k]=b2
    ans.append(np.linalg.det(Ak)/detA)
print("\nQ2) (x,y,z) =", tuple(ans))

# Q3 PuLP Max 4x+3y s.t. 2x+y<=8; x+2y<=6; x,y>=0
prob = LpProblem("Slip6_Q3", LpMaximize)
x = LpVariable('x', lowBound=0); y = LpVariable('y', lowBound=0)
prob += 4*x + 3*y
prob += 2*x + y <= 8
prob += x + 2*y <= 6
prob.solve()
print("Q3) Status:", LpStatus[prob.status], " x,y =", x.value(), y.value(), " Z =", value(prob.objective))
