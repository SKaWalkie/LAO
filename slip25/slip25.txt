# Slip 25 — scalar multiply + A^2; Gauss Elimination; LP with optimize (Min)
import numpy as np
from scipy.optimize import linprog

# Q1
A = np.array([[2,7,-1],[0,1,-2],[-1,-3,4]], float)
print("Q1) 5*A =\n", 5*A)
print("Q1) A^2 =\n", A@A)

# Q2 Gauss Elimination for:
A2 = np.array([[1,1,1],[2,3,5],[4,1,2]], float)
b2 = np.array([6,15,8], float)
M = np.c_[A2,b2]
# Eliminate
M[1] -= 2*M[0]; M[2] -= 4*M[0]
M[2] -= (M[2,1]/M[1,1])*M[1]
# Back-sub
U,b = M[:,:-1], M[:,-1]
z = b[2]/U[2,2]; y = (b[1]-U[1,2]*z)/U[1,1]; x = (b[0]-U[0,1]*y-U[0,2]*z)/U[0,0]
print("Q2) (x,y,z) =", (x,y,z))

# Q3 Min 7x+5y+4z with ≥
c = np.array([7,5,4], float)
A_ub = -np.array([[3,2,1],[2,1,4]], float)
b_ub = -np.array([15,18], float)
res = linprog(c, A_ub=A_ub, b_ub=b_ub, bounds=[(0,None)]*3, method="highs")
print("Q3) Z* =", res.fun, " at (x,y,z) =", res.x)
