# Slip 14 — eigenpairs; Gauss-Seidel (2x2); LP with optimize (Min)
import numpy as np
from scipy.optimize import linprog

# Q1
C = np.array([[1,1,3],[4,0,1],[5,-2,-1]], float)
w,v = np.linalg.eig(C)
print("Q1) eigenvalues =", w)
print("Q1) eigenvectors =\n", v)

# Q2 Gauss-Seidel for:
# 2x + 5y = 2
# -4x + 3y = -30
A = np.array([[2,5],[-4,3]], float)
b = np.array([2,-30], float)
x = np.zeros(2)
for _ in range(50):
    x_old=x.copy()
    x[0] = (b[0]-A[0,1]*x[1])/A[0,0]
    x[1] = (b[1]-A[1,0]*x[0])/A[1,1]
    if np.linalg.norm(x-x_old,np.inf)<1e-10: break
print("Q2) (x,y) =", x)

# Q3 Min 8x+4y+6z with ≥ -> convert to ≤ by *(-1)
c = np.array([8,4,6], float)
A_ub = -np.array([[3,2,1],[2,5,3]], float)
b_ub = -np.array([15,20], float)
res = linprog(c, A_ub=A_ub, b_ub=b_ub, bounds=[(0,None)]*3, method="highs")
print("Q3) Z* =", res.fun, " at (x,y,z) =", res.x)
