# Slip 20 â€” PuLP Max; Cramer's 3x3; Gauss Elimination from [A|B]
import numpy as np
from pulp import *

# Q1
prob = LpProblem("Slip20_Q1", LpMaximize)
x=LpVariable('x',lowBound=0); y=LpVariable('y',lowBound=0)
prob += 10*x + 15*y
prob += 2*x + y <= 8
prob += x + 3*y <= 9
prob.solve()
print("Q1) Status:", LpStatus[prob.status], " x,y =", x.value(), y.value(), " Z =", value(prob.objective))

# Q2 Cramer's
A = np.array([[4,1,2],[1,5,1],[2,1,6]], float)
b = np.array([4,7,9], float)
detA=np.linalg.det(A)
sol=[]
for k in range(3):
    Ak=A.copy(); Ak[:,k]=b
    sol.append(np.linalg.det(Ak)/detA)
print("Q2) (x,y,z) =", tuple(sol))

# Q3 Gauss elimination from augmented:
M = np.array([[2,1,-1,3],[-3,-1,2,-5],[-2,1,2,-2]], float)
# Elimination
M[2] -= (M[2,0]/M[0,0])*M[0]
M[1] -= (M[1,0]/M[0,0])*M[0]
M[2] -= (M[2,1]/M[1,1])*M[1]
# Back-sub
U,bv = M[:,:-1], M[:,-1]
z = bv[2]/U[2,2]; y = (bv[1]-U[1,2]*z)/U[1,1]; x = (bv[0]-U[0,1]*y-U[0,2]*z)/U[0,0]
print("Q3) (x,y,z) =", (x,y,z))
