# Slip 21 — orders and transposes; Gauss-Jordan; LP with optimize (Max)
import numpy as np
from scipy.optimize import linprog

# Q1
A = np.array([[1,2,3],[4,5,6]], float)
B = np.array([[7,8],[9,10],[11,12]], float)
print("Q1) order(A) =", A.shape, " order(B) =", B.shape)
print("Q1) A^T =\n", A.T)
print("Q1) B^T =\n", B.T)

# Q2 Gauss-Jordan
M = np.array([[2,1,-1,1],[1,3,2,12],[1,-1,2,0]], float)
for i in range(3):
    M[i] = M[i]/M[i,i]
    for j in range(3):
        if i!=j:
            M[j] -= M[j,i]*M[i]
print("Q2) (x,y,z) =", tuple(M[:,3]))

# Q3 Max 5x+4y+6z with ≤
c = -np.array([5,4,6], float)
A_ub = np.array([[2,1,1],[1,3,2]], float)
b_ub = np.array([10,12], float)
res = linprog(c, A_ub=A_ub, b_ub=b_ub, bounds=[(0,None)]*3, method="highs")
print("Q3) Z* =", -res.fun, " at (x,y,z) =", res.x)
