from scipy.optimize import linprog
import numpy as np
c = -np.array([4,1,3,5])                       # Max → negate
A = np.array([[-4,-6,5,4],[-8,-3,3,2],[1,1,0,0]], float)  # first ≥ negated
b = np.array([20,2,11], float)
res = linprog(c, A_ub=A, b_ub=b, bounds=[(0,None)]*4, method="highs")
print("Max Z=", -res.fun, " x*=", res.x)
``` :contentReference[oaicite:0]{index=0}

---

## Slip 4 — Max \(5x + 3y\)  
Constraints: \(x+y \le 7\), \(2x+5y \le 1\), \(x,y\ge0\)
```python
from scipy.optimize import linprog
import numpy as np
c = -np.array([5,3])
A = np.array([[1,1],[2,5]], float)
b = np.array([7,1], float)
res = linprog(c, A_ub=A, b_ub=b, bounds=[(0,None)]*2, method="highs")
print("Max Z=", -res.fun, " x*=", res.x)
``` :contentReference[oaicite:1]{index=1}

---

## Slip 7 — Max \(3x_1 + 5x_2 + 4x_3\)  
Constraints: \(2x_1+3x_2 \le 8\), \(2x_2+5x_3 \le 10\), \(3x_1+2x_2+4x_3 \le 15\)
```python
from scipy.optimize import linprog
import numpy as np
c = -np.array([3,5,4])
A = np.array([[2,3,0],[0,2,5],[3,2,4]], float)
b = np.array([8,10,15], float)
res = linprog(c, A_ub=A, b_ub=b, bounds=[(0,None)]*3, method="highs")
print("Max Z=", -res.fun, " x*=", res.x)
``` :contentReference[oaicite:2]{index=2}

---

## Slip 8 — Max \(4x + 3y\)  
Constraints: \(2x+y \le 8\), \(x+2y \le 6\)
```python
from scipy.optimize import linprog
import numpy as np
c = -np.array([4,3])
A = np.array([[2,1],[1,2]], float)
b = np.array([8,6], float)
res = linprog(c, A_ub=A, b_ub=b, bounds=[(0,None)]*2, method="highs")
print("Max Z=", -res.fun, " x*=", res.x)
``` :contentReference[oaicite:3]{index=3}

---

## Slip 10 — Max \(5x + 7y\)  
Constraints: \(2x+3y \ge 12\), \(x+y \ge 5\)
```python
from scipy.optimize import linprog
import numpy as np
c = -np.array([5,7])
A = -np.array([[2,3],[1,1]], float)   # ≥ rows negated
b = -np.array([12,5], float)
res = linprog(c, A_ub=A, b_ub=b, bounds=[(0,None)]*2, method="highs")
print("Max Z=", -res.fun, " x*=", res.x)
``` :contentReference[oaicite:4]{index=4}

---

## Slip 12 — Max \(6x_1 + 5x_2 + 4x_3\)  
Constraints: \(x_1+2x_2+x_3 \le 10\), \(2x_1+x_2+3x_3 \le 15\)
```python
from scipy.optimize import linprog
import numpy as np
c = -np.array([6,5,4])
A = np.array([[1,2,1],[2,1,3]], float)
b = np.array([10,15], float)
res = linprog(c, A_ub=A, b_ub=b, bounds=[(0,None)]*3, method="highs")
print("Max Z=", -res.fun, " x*=", res.x)
``` :contentReference[oaicite:5]{index=5}

---

## Slip 14 — **Min** \(8x + 4y + 6z\)  
Constraints: \(3x+2y+z \ge 15\), \(2x+5y+3z \ge 20\)
```python
from scipy.optimize import linprog
import numpy as np
c = np.array([8,4,6], float)                 # Min → keep +ve
A = -np.array([[3,2,1],[2,5,3]], float)      # ≥ rows negated
b = -np.array([15,20], float)
res = linprog(c, A_ub=A, b_ub=b, bounds=[(0,None)]*3, method="highs")
print("Min Z=", res.fun, " x*=", res.x)
``` :contentReference[oaicite:6]{index=6}

---

## Slip 15 — **Min** \(3.5x + 2y\)  
Constraints: \(x+y \ge 5\), \(x \ge 4\), \(y \le 2\)
```python
from scipy.optimize import linprog
import numpy as np
c = np.array([3.5,2.0], float)               # Min
A = -np.array([[1,1]], float)                # x+y ≥ 5 → -(x+y) ≤ -5
b = -np.array([5], float)
bounds = [(4, None), (0, 2)]                 # x ≥ 4, 0 ≤ y ≤ 2
res = linprog(c, A_ub=A, b_ub=b, bounds=bounds, method="highs")
print("Min Z=", res.fun, " x*=", res.x)
``` :contentReference[oaicite:7]{index=7}

---

## Slip 17 — Max \(10x + 15y\)  
Constraints: \(2x+y \le 8\), \(x+3y \le 9\)
```python
from scipy.optimize import linprog
import numpy as np
c = -np.array([10,15])
A = np.array([[2,1],[1,3]], float)
b = np.array([8,9], float)
res = linprog(c, A_ub=A, b_ub=b, bounds=[(0,None)]*2, method="highs")
print("Max Z=", -res.fun, " x*=", res.x)
``` :contentReference[oaicite:8]{index=8}

---

## Slip 18 — **Min** \(2x + 3y + 4z\)  
Constraints: \(x+2y+z \ge 8\), \(3x+y+2z \le 12\)
```python
from scipy.optimize import linprog
import numpy as np
c = np.array([2,3,4], float)                 # Min
A = np.array([[-1,-2,-1],[3,1,2]], float)    # first ≥ negated, second ≤ as is
b = np.array([-8,12], float)
res = linprog(c, A_ub=A, b_ub=b, bounds=[(0,None)]*3, method="highs")
print("Min Z=", res.fun, " x*=", res.x)
``` :contentReference[oaicite:9]{index=9}

---

## Slip 21 — Max \(5x + 4y + 6z\)  
Constraints: \(2x+y+z \le 10\), \(x+3y+2z \le 12\)
```python
from scipy.optimize import linprog
import numpy as np
c = -np.array([5,4,6])
A = np.array([[2,1,1],[1,3,2]], float)
b = np.array([10,12], float)
res = linprog(c, A_ub=A, b_ub=b, bounds=[(0,None)]*3, method="highs")
print("Max Z=", -res.fun, " x*=", res.x)
``` :contentReference[oaicite:10]{index=10}

---

## Slip 24 — Max \(150x + 75y\)  
Constraints: \(4x+6y \le 24\), \(5x+3y \le 15\)
```python
from scipy.optimize import linprog
import numpy as np
c = -np.array([150,75])
A = np.array([[4,6],[5,3]], float)
b = np.array([24,15], float)
res = linprog(c, A_ub=A, b_ub=b, bounds=[(0,None)]*2, method="highs")
print("Max Z=", -res.fun, " x*=", res.x)
``` :contentReference[oaicite:11]{index=11}

---

## Slip 25 — **Min** \(7x + 5y + 4z\)  
Constraints: \(3x+2y+z \ge 15\), \(2x+y+4z \ge 18\)
```python
from scipy.optimize import linprog
import numpy as np
c = np.array([7,5,4], float)                 # Min
A = -np.array([[3,2,1],[2,1,4]], float)      # ≥ rows negated
b = -np.array([15,18], float)
res = linprog(c, A_ub=A, b_ub=b, bounds=[(0,None)]*3, method="highs")
print("Min Z=", res.fun, " x*=", res.x)
``` :contentReference[oaicite:12]{index=12}

---

That’s all **optimize** (SciPy) slips solved separately, short and clean. If you want the **PuLP** ones in the same style, say the word and I’ll do those next.
